{"version":3,"sources":["../src/Converter.ts"],"names":["bent","BigNumber","FilecoinNumber","Converter","constructor","currency","options","Error","apiKey","apiURL","rate","cacheConversionRate","convert","toFIL","amount","filAmount","dividedBy","fromFIL","multipliedBy","from","to","get","res","data","quote","price","getCachedConversionRate"],"mappings":"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","sourcesContent":["import bent from 'bent'\nimport { BigNumber } from 'bignumber.js'\nimport { FilecoinNumber } from './FilecoinNumber'\n\nexport type ConverterOptions = {\n  apiKey?: string\n  apiURL?: string\n}\n\nexport class Converter {\n  readonly currency: string\n  readonly apiKey: string\n  readonly apiURL: string\n  rate: BigNumber | null\n\n  constructor(currency: string, options?: ConverterOptions) {\n    if (!currency) throw new Error('No currency passed.')\n    this.currency = currency\n    this.apiKey = options?.apiKey || ''\n    this.apiURL = options?.apiURL || 'https://pro-api.coinmarketcap.com/'\n    this.rate = null\n  }\n\n  async cacheConversionRate() {\n    this.rate = new BigNumber(await this.convert(1, 'FIL', this.currency))\n  }\n\n  toFIL(amount: string | number | BigNumber): FilecoinNumber {\n    if (!amount) return this.toFIL('0')\n    if (!this.rate) {\n      throw new Error(\n        'Call cacheConversionRate() to get the conversion rate before calling .toFIL.',\n      )\n    }\n    if (\n      typeof amount === 'string' ||\n      typeof amount === 'number' ||\n      amount instanceof BigNumber\n    ) {\n      const filAmount = new BigNumber(amount).dividedBy(this.rate)\n      return new FilecoinNumber(filAmount, 'fil')\n    }\n\n    throw new Error(\n      'Amount passed must be a Number, String, or an instanceof BigNumber',\n    )\n  }\n\n  fromFIL(amount: string | number | BigNumber | FilecoinNumber): BigNumber {\n    if (!amount) return this.fromFIL('0')\n    if (!this.rate)\n      throw new Error(\n        'Call cacheConversionRate() to get the conversion rate before calling .fromFIL.',\n      )\n\n    if (\n      typeof amount === 'string' ||\n      typeof amount === 'number' ||\n      amount instanceof BigNumber\n    ) {\n      return new BigNumber(amount).multipliedBy(this.rate)\n    }\n\n    throw new Error(\n      'Amount passed must be a Number, String, or an instanceof BigNumber.',\n    )\n  }\n\n  async convert(amount: number, from: string, to: string): Promise<string> {\n    const get = bent('GET', 'json', {\n      'X-CMC_PRO_API_KEY': this.apiKey,\n    })\n\n    const res = await get(\n      `${this.apiURL}/v1/tools/price-conversion?symbol=${from}&amount=${amount}&convert=${to}`,\n    )\n\n    if (!res.data || !res.data.quote || !res.data.quote[to])\n      throw new Error('No conversion price found.')\n\n    return res.data.quote[to].price\n  }\n\n  getCachedConversionRate() {\n    return this.rate\n  }\n}\n"],"file":"Converter.js"}