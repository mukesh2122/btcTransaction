import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import bent from 'bent';
import { BigNumber } from 'bignumber.js';
import { FilecoinNumber } from './FilecoinNumber';
export class Converter {
  constructor(currency, options) {
    _defineProperty(this, "currency", void 0);

    _defineProperty(this, "apiKey", void 0);

    _defineProperty(this, "apiURL", void 0);

    _defineProperty(this, "rate", void 0);

    if (!currency) throw new Error('No currency passed.');
    this.currency = currency;
    this.apiKey = (options === null || options === void 0 ? void 0 : options.apiKey) || '';
    this.apiURL = (options === null || options === void 0 ? void 0 : options.apiURL) || 'https://pro-api.coinmarketcap.com/';
    this.rate = null;
  }

  cacheConversionRate() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.rate = new BigNumber(yield _this.convert(1, 'FIL', _this.currency));
    })();
  }

  toFIL(amount) {
    if (!amount) return this.toFIL('0');

    if (!this.rate) {
      throw new Error('Call cacheConversionRate() to get the conversion rate before calling .toFIL.');
    }

    if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof BigNumber) {
      const filAmount = new BigNumber(amount).dividedBy(this.rate);
      return new FilecoinNumber(filAmount, 'fil');
    }

    throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber');
  }

  fromFIL(amount) {
    if (!amount) return this.fromFIL('0');
    if (!this.rate) throw new Error('Call cacheConversionRate() to get the conversion rate before calling .fromFIL.');

    if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof BigNumber) {
      return new BigNumber(amount).multipliedBy(this.rate);
    }

    throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber.');
  }

  convert(amount, from, to) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const get = bent('GET', 'json', {
        'X-CMC_PRO_API_KEY': _this2.apiKey
      });
      const res = yield get(`${_this2.apiURL}/v1/tools/price-conversion?symbol=${from}&amount=${amount}&convert=${to}`);
      if (!res.data || !res.data.quote || !res.data.quote[to]) throw new Error('No conversion price found.');
      return res.data.quote[to].price;
    })();
  }

  getCachedConversionRate() {
    return this.rate;
  }

}
//# sourceMappingURL=Converter.js.map