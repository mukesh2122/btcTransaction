"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Converter = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _bent = _interopRequireDefault(require("bent"));

var _bignumber = require("bignumber.js");

var _FilecoinNumber = require("./FilecoinNumber");

var Converter = /*#__PURE__*/function () {
  function Converter(currency, options) {
    (0, _classCallCheck2["default"])(this, Converter);
    (0, _defineProperty2["default"])(this, "currency", void 0);
    (0, _defineProperty2["default"])(this, "apiKey", void 0);
    (0, _defineProperty2["default"])(this, "apiURL", void 0);
    (0, _defineProperty2["default"])(this, "rate", void 0);
    if (!currency) throw new Error('No currency passed.');
    this.currency = currency;
    this.apiKey = (options === null || options === void 0 ? void 0 : options.apiKey) || '';
    this.apiURL = (options === null || options === void 0 ? void 0 : options.apiURL) || 'https://pro-api.coinmarketcap.com/';
    this.rate = null;
  }

  (0, _createClass2["default"])(Converter, [{
    key: "cacheConversionRate",
    value: function () {
      var _cacheConversionRate = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = _bignumber.BigNumber;
                _context.next = 3;
                return this.convert(1, 'FIL', this.currency);

              case 3:
                _context.t1 = _context.sent;
                this.rate = new _context.t0(_context.t1);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function cacheConversionRate() {
        return _cacheConversionRate.apply(this, arguments);
      }

      return cacheConversionRate;
    }()
  }, {
    key: "toFIL",
    value: function toFIL(amount) {
      if (!amount) return this.toFIL('0');

      if (!this.rate) {
        throw new Error('Call cacheConversionRate() to get the conversion rate before calling .toFIL.');
      }

      if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof _bignumber.BigNumber) {
        var filAmount = new _bignumber.BigNumber(amount).dividedBy(this.rate);
        return new _FilecoinNumber.FilecoinNumber(filAmount, 'fil');
      }

      throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber');
    }
  }, {
    key: "fromFIL",
    value: function fromFIL(amount) {
      if (!amount) return this.fromFIL('0');
      if (!this.rate) throw new Error('Call cacheConversionRate() to get the conversion rate before calling .fromFIL.');

      if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof _bignumber.BigNumber) {
        return new _bignumber.BigNumber(amount).multipliedBy(this.rate);
      }

      throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber.');
    }
  }, {
    key: "convert",
    value: function () {
      var _convert = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(amount, from, to) {
        var get, res;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                get = (0, _bent["default"])('GET', 'json', {
                  'X-CMC_PRO_API_KEY': this.apiKey
                });
                _context2.next = 3;
                return get("".concat(this.apiURL, "/v1/tools/price-conversion?symbol=").concat(from, "&amount=").concat(amount, "&convert=").concat(to));

              case 3:
                res = _context2.sent;

                if (!(!res.data || !res.data.quote || !res.data.quote[to])) {
                  _context2.next = 6;
                  break;
                }

                throw new Error('No conversion price found.');

              case 6:
                return _context2.abrupt("return", res.data.quote[to].price);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function convert(_x, _x2, _x3) {
        return _convert.apply(this, arguments);
      }

      return convert;
    }()
  }, {
    key: "getCachedConversionRate",
    value: function getCachedConversionRate() {
      return this.rate;
    }
  }]);
  return Converter;
}();

exports.Converter = Converter;
//# sourceMappingURL=Converter.js.map