{"version":3,"sources":["../src/FilecoinNumber.ts"],"names":["BigNumber","set","ROUNDING_MODE","ROUND_HALF_DOWN","config","EXPONENTIAL_AT","asBigNumber","amount","denom","Error","formattedDenom","toLowerCase","shiftedBy","FilecoinNumber","toString","toFixed"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,cAA1B,C,CAEA;;AACAA,SAAS,CAACC,GAAV,CAAc;AAAEC,EAAAA,aAAa,EAAEF,SAAS,CAACG;AAA3B,CAAd;AACAH,SAAS,CAACI,MAAV,CAAiB;AAAEC,EAAAA,cAAc,EAAE;AAAlB,CAAjB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA0DC,KAA1D,EAAyE;AACvE,MAAI,CAACA,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,MAAMC,cAAc,GAAGF,KAAK,CAACG,WAAN,EAAvB;;AACA,MACED,cAAc,KAAK,KAAnB,IACAA,cAAc,KAAK,SADnB,IAEAA,cAAc,KAAK,SAHrB,EAIE;AACA,UAAM,IAAID,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,MAAIC,cAAc,KAAK,SAAvB,EAAkC;AAChC,WAAO,IAAIV,SAAJ,CAAcO,MAAd,EAAsBK,SAAtB,CAAgC,CAAC,EAAjC,CAAP;AACD,GAFD,MAEO,IAAIF,cAAc,KAAK,SAAvB,EAAkC;AACvC,WAAO,IAAIV,SAAJ,CAAcO,MAAd,EAAsBK,SAAtB,CAAgC,CAAC,EAAjC,CAAP;AACD,GAFM,MAEA;AACL,WAAOL,MAAP;AACD;AACF,C,CAED;;;AACA,WAAaM,cAAb;AAAA;;AAAA;;AACE,0BAAYN,MAAZ,EAAiDC,KAAjD,EAAgE;AAAA;;AAAA,6BACxDF,WAAW,CAACC,MAAD,EAASC,KAAT,CAD6C;AAE/D;;AAHH;AAAA;AAAA,4BAKU;AACN,aAAO,KAAKM,QAAL,EAAP;AACD;AAPH;AAAA;AAAA,gCASc;AACV,aAAO,KAAKF,SAAL,CAAe,EAAf,EAAmBE,QAAnB,EAAP;AACD;AAXH;AAAA;AAAA,gCAac;AACV,aAAO,KAAKF,SAAL,CAAe,EAAf,EAAmBG,OAAnB,CAA2B,CAA3B,EAA8B,CAA9B,CAAP;AACD;AAfH;;AAAA;AAAA,EAAoCf,SAApC","sourcesContent":["import { BigNumber } from 'bignumber.js'\n\n// not sure how we want to configure rounding for this\nBigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN })\nBigNumber.config({ EXPONENTIAL_AT: 1e9 })\n\nfunction asBigNumber(amount: string | number | BigNumber, denom: string) {\n  if (!denom) {\n    throw new Error('No Filecoin denomination passed in constructor.')\n  }\n\n  const formattedDenom = denom.toLowerCase()\n  if (\n    formattedDenom !== 'fil' &&\n    formattedDenom !== 'picofil' &&\n    formattedDenom !== 'attofil'\n  ) {\n    throw new Error(\n      'Unsupported denomination passed in constructor. Must pass picofil or attofil.'\n    )\n  }\n\n  if (formattedDenom === 'picofil') {\n    return new BigNumber(amount).shiftedBy(-12)\n  } else if (formattedDenom === 'attofil') {\n    return new BigNumber(amount).shiftedBy(-18)\n  } else {\n    return amount\n  }\n}\n\n// stores filecoin numbers in denominations of Fil, not AttoFil\nexport class FilecoinNumber extends BigNumber {\n  constructor(amount: string | number | BigNumber, denom: string) {\n    super(asBigNumber(amount, denom))\n  }\n\n  toFil() {\n    return this.toString()\n  }\n\n  toPicoFil() {\n    return this.shiftedBy(12).toString()\n  }\n\n  toAttoFil() {\n    return this.shiftedBy(18).toFixed(0, 1)\n  }\n}\n"],"file":"FilecoinNumber.js"}