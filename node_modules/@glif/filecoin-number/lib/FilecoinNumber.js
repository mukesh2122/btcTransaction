import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { BigNumber } from 'bignumber.js'; // not sure how we want to configure rounding for this

BigNumber.set({
  ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN
});
BigNumber.config({
  EXPONENTIAL_AT: 1e9
});

function asBigNumber(amount, denom) {
  if (!denom) {
    throw new Error('No Filecoin denomination passed in constructor.');
  }

  var formattedDenom = denom.toLowerCase();

  if (formattedDenom !== 'fil' && formattedDenom !== 'picofil' && formattedDenom !== 'attofil') {
    throw new Error('Unsupported denomination passed in constructor. Must pass picofil or attofil.');
  }

  if (formattedDenom === 'picofil') {
    return new BigNumber(amount).shiftedBy(-12);
  } else if (formattedDenom === 'attofil') {
    return new BigNumber(amount).shiftedBy(-18);
  } else {
    return amount;
  }
} // stores filecoin numbers in denominations of Fil, not AttoFil


export var FilecoinNumber = /*#__PURE__*/function (_BigNumber) {
  _inherits(FilecoinNumber, _BigNumber);

  var _super = _createSuper(FilecoinNumber);

  function FilecoinNumber(amount, denom) {
    _classCallCheck(this, FilecoinNumber);

    return _super.call(this, asBigNumber(amount, denom));
  }

  _createClass(FilecoinNumber, [{
    key: "toFil",
    value: function toFil() {
      return this.toString();
    }
  }, {
    key: "toPicoFil",
    value: function toPicoFil() {
      return this.shiftedBy(12).toString();
    }
  }, {
    key: "toAttoFil",
    value: function toAttoFil() {
      return this.shiftedBy(18).toFixed(0, 1);
    }
  }]);

  return FilecoinNumber;
}(BigNumber);
//# sourceMappingURL=FilecoinNumber.js.map