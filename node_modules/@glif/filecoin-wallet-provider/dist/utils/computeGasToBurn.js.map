{"version":3,"sources":["../../src/utils/computeGasToBurn.ts"],"names":["gasOveruseNum","gasOveruseDenom","gasUsed","gasLimit","gasUsedBN","BigNumber","gasLimitBN","isZero","overuse","times","dividedToIntegerBy","over","minus","isLessThan","isGreaterThan","gasToBurn","toFixed"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAMA,aAAa,GAAG,EAAtB;AACA,IAAMC,eAAe,GAAG,EAAxB;;eAEe,kBAACC,OAAD,EAAqBC,QAArB,EAAwD;AACrE,MAAMC,SAAS,GAAG,IAAIC,qBAAJ,CAAcH,OAAd,CAAlB;AACA,MAAMI,UAAU,GAAG,IAAID,qBAAJ,CAAcF,QAAd,CAAnB;;AACA,MAAIC,SAAS,CAACG,MAAV,EAAJ,EAAwB;AACtB,WAAOD,UAAP;AACD,GALoE,CAOrE;AACA;AACA;AAEA;AACA;AACA;;;AACA,MAAME,OAAO,GAAGJ,SAAS,CACtBK,KADa,CACPT,aADO,EAEbU,kBAFa,CAEMT,eAFN,CAAhB;AAGA,MAAIU,IAAI,GAAGR,QAAQ,CAACS,KAAT,CAAeJ,OAAf,CAAX;;AAEA,MAAIG,IAAI,CAACE,UAAL,CAAgB,CAAhB,CAAJ,EAAwB;AACtB,WAAO,IAAIR,qBAAJ,CAAc,CAAd,CAAP;AACD;;AAED,MAAIM,IAAI,CAACG,aAAL,CAAmBV,SAAnB,CAAJ,EAAmC;AACjCO,IAAAA,IAAI,GAAGP,SAAP;AACD;;AAED,MAAIW,SAAS,GAAGZ,QAAQ,CAACS,KAAT,CAAeR,SAAf,CAAhB;AACAW,EAAAA,SAAS,GAAGA,SAAS,CAACN,KAAV,CAAgBE,IAAhB,CAAZ;AACAI,EAAAA,SAAS,GAAGA,SAAS,CAACL,kBAAV,CAA6BN,SAA7B,CAAZ;AAEA,SAAO,IAAIC,qBAAJ,CAAcU,SAAS,CAACC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAAd,CAAP;AACD,C","sourcesContent":["import BigNumber from 'bignumber.js'\n\nconst gasOveruseNum = 11\nconst gasOveruseDenom = 10\n\nexport default (gasUsed: BigNumber, gasLimit: BigNumber): BigNumber => {\n  const gasUsedBN = new BigNumber(gasUsed)\n  const gasLimitBN = new BigNumber(gasLimit)\n  if (gasUsedBN.isZero()) {\n    return gasLimitBN\n  }\n\n  // over = gasLimit/gasUsed - 1 - 0.1\n  // over = min(over, 1)\n  // gasToBurn = (gasLimit - gasUsed) * over\n\n  // so to factor out division from `over`\n  // over*gasUsed = min(gasLimit - (11*gasUsed)/10, gasUsed)\n  // gasToBurn = ((gasLimit - gasUsed)*over*gasUsed) / gasUsed\n  const overuse = gasUsedBN\n    .times(gasOveruseNum)\n    .dividedToIntegerBy(gasOveruseDenom)\n  let over = gasLimit.minus(overuse)\n\n  if (over.isLessThan(0)) {\n    return new BigNumber(0)\n  }\n\n  if (over.isGreaterThan(gasUsedBN)) {\n    over = gasUsedBN\n  }\n\n  let gasToBurn = gasLimit.minus(gasUsedBN)\n  gasToBurn = gasToBurn.times(over)\n  gasToBurn = gasToBurn.dividedToIntegerBy(gasUsedBN)\n\n  return new BigNumber(gasToBurn.toFixed(0, 4))\n}\n"],"file":"computeGasToBurn.js"}