import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import LotusRpcEngine from '@glif/filecoin-rpc-client';
import { FilecoinNumber } from '@glif/filecoin-number';
import { checkAddressString } from '@glif/filecoin-address';
import { Message } from '@glif/filecoin-message';
import { computeGasToBurn, KNOWN_TYPE_0_ADDRESS, KNOWN_TYPE_1_ADDRESS, KNOWN_TYPE_3_ADDRESS, allCallsExitWithCode0 } from './utils';
import { BigNumber } from 'bignumber.js';
import { num1GreaterThanNum2 } from './utils';
export var Filecoin = function Filecoin(provider) {
  var _this = this;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    apiAddress: 'http://127.0.0.1:1234/rpc/v0'
  };

  _classCallCheck(this, Filecoin);

  _defineProperty(this, "wallet", void 0);

  _defineProperty(this, "jsonRpcEngine", void 0);

  _defineProperty(this, "getBalance", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {
      var balance;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              checkAddressString(address);
              _context.next = 3;
              return _this.jsonRpcEngine.request('WalletBalance', address);

            case 3:
              balance = _context.sent;
              return _context.abrupt("return", new FilecoinNumber(balance, 'attofil'));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());

  _defineProperty(this, "simulateMessage", /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {
      var res;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.jsonRpcEngine.request('StateCall', message, null);

            case 2:
              res = _context2.sent;
              return _context2.abrupt("return", allCallsExitWithCode0(res));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());

  _defineProperty(this, "sendMessage", /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message, signature) {
      var signedMessage;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (message) {
                _context3.next = 2;
                break;
              }

              throw new Error('No message provided.');

            case 2:
              if (signature) {
                _context3.next = 4;
                break;
              }

              throw new Error('No signature provided.');

            case 4:
              signedMessage = {
                Message: message,
                Signature: {
                  // wallet only supports secp256k1 keys for now
                  Type: 1,
                  Data: signature
                }
              };
              return _context3.abrupt("return", _this.jsonRpcEngine.request('MpoolPush', signedMessage));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }());

  _defineProperty(this, "getNonce", /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address) {
      var nonce;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (address) {
                _context4.next = 2;
                break;
              }

              throw new Error('No address provided.');

            case 2:
              checkAddressString(address);
              _context4.prev = 3;
              _context4.t0 = Number;
              _context4.next = 7;
              return _this.jsonRpcEngine.request('MpoolGetNonce', address);

            case 7:
              _context4.t1 = _context4.sent;
              nonce = (0, _context4.t0)(_context4.t1);
              return _context4.abrupt("return", nonce);

            case 12:
              _context4.prev = 12;
              _context4.t2 = _context4["catch"](3);

              if (!(_context4.t2 && _context4.t2.message && _context4.t2.message.toLowerCase().includes('actor not found'))) {
                _context4.next = 16;
                break;
              }

              return _context4.abrupt("return", 0);

            case 16:
              throw new Error(_context4.t2);

            case 17:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[3, 12]]);
    }));

    return function (_x5) {
      return _ref4.apply(this, arguments);
    };
  }());

  _defineProperty(this, "cloneMsgWOnChainFromAddr", /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(message) {
      var clonedMsg, networkPrefix;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              clonedMsg = Object.assign({}, message);
              _context5.prev = 1;
              _context5.next = 4;
              return _this.jsonRpcEngine.request('StateLookupID', clonedMsg.From, null);

            case 4:
              _context5.next = 9;
              break;

            case 6:
              _context5.prev = 6;
              _context5.t0 = _context5["catch"](1);

              // if from actor doesnt exist, use a hardcoded known actor address
              if (_context5.t0.message.toLowerCase().includes('actor not found')) {
                networkPrefix = clonedMsg.From[0];
                if (!clonedMsg.From) clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix];
                if (clonedMsg.From[1] === '0') clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix];else if (clonedMsg.From[1] === '1') clonedMsg.From = KNOWN_TYPE_1_ADDRESS[networkPrefix];else if (clonedMsg.From[1] === '3') clonedMsg.From = KNOWN_TYPE_3_ADDRESS[networkPrefix];else {
                  // this should never happen, only t1 and t3 addresses can be used as a from?
                  clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix];
                }
              }

            case 9:
              return _context5.abrupt("return", clonedMsg);

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[1, 6]]);
    }));

    return function (_x6) {
      return _ref5.apply(this, arguments);
    };
  }());

  _defineProperty(this, "gasEstimateFeeCap", /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(message) {
      var clonedMsg, feeCap;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (message) {
                _context6.next = 2;
                break;
              }

              throw new Error('No message provided.');

            case 2:
              _context6.next = 4;
              return _this.cloneMsgWOnChainFromAddr(message);

            case 4:
              clonedMsg = _context6.sent;
              _context6.next = 7;
              return _this.jsonRpcEngine.request('GasEstimateFeeCap', clonedMsg, 0, null);

            case 7:
              feeCap = _context6.sent;
              return _context6.abrupt("return", new FilecoinNumber(feeCap, 'attofil'));

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x7) {
      return _ref6.apply(this, arguments);
    };
  }());

  _defineProperty(this, "gasEstimateGasLimit", /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(message) {
      var clonedMsg, gasLimit;
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (message) {
                _context7.next = 2;
                break;
              }

              throw new Error('No message provided.');

            case 2:
              _context7.next = 4;
              return _this.cloneMsgWOnChainFromAddr(message);

            case 4:
              clonedMsg = _context7.sent;
              _context7.next = 7;
              return _this.jsonRpcEngine.request('GasEstimateGasLimit', clonedMsg, null);

            case 7:
              gasLimit = _context7.sent;
              return _context7.abrupt("return", new FilecoinNumber(gasLimit, 'attofil'));

            case 9:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8) {
      return _ref7.apply(this, arguments);
    };
  }());

  _defineProperty(this, "gasEstimateGasPremium", /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(message) {
      var numBlocksIncluded,
          clonedMsg,
          gasPremium,
          _args8 = arguments;
      return _regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              numBlocksIncluded = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : 0;

              if (message) {
                _context8.next = 3;
                break;
              }

              throw new Error('No message provided.');

            case 3:
              _context8.next = 5;
              return _this.cloneMsgWOnChainFromAddr(message);

            case 5:
              clonedMsg = _context8.sent;
              _context8.next = 8;
              return _this.jsonRpcEngine.request('GasEstimateGasPremium', numBlocksIncluded, clonedMsg.From, clonedMsg.GasLimit || 0, null);

            case 8:
              gasPremium = _context8.sent;
              return _context8.abrupt("return", new FilecoinNumber(gasPremium, 'attofil'));

            case 10:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9) {
      return _ref8.apply(this, arguments);
    };
  }());

  _defineProperty(this, "gasEstimateMessageGas", /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(message) {
      var maxFee,
          clonedMsg,
          _yield$_this$jsonRpcE,
          To,
          Value,
          GasPremium,
          GasFeeCap,
          GasLimit,
          Method,
          Nonce,
          Params,
          toAddressWithCorrectPrefix,
          _args9 = arguments;

      return _regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              maxFee = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : new FilecoinNumber('0.1', 'fil').toAttoFil();

              if (message) {
                _context9.next = 3;
                break;
              }

              throw new Error('No message provided.');

            case 3:
              _context9.next = 5;
              return _this.cloneMsgWOnChainFromAddr(message);

            case 5:
              clonedMsg = _context9.sent;
              _context9.next = 8;
              return _this.jsonRpcEngine.request('GasEstimateMessageGas', clonedMsg, {
                MaxFee: maxFee
              }, null);

            case 8:
              _yield$_this$jsonRpcE = _context9.sent;
              To = _yield$_this$jsonRpcE.To;
              Value = _yield$_this$jsonRpcE.Value;
              GasPremium = _yield$_this$jsonRpcE.GasPremium;
              GasFeeCap = _yield$_this$jsonRpcE.GasFeeCap;
              GasLimit = _yield$_this$jsonRpcE.GasLimit;
              Method = _yield$_this$jsonRpcE.Method;
              Nonce = _yield$_this$jsonRpcE.Nonce;
              Params = _yield$_this$jsonRpcE.Params;
              // this is a hack to get by weird UI bugs where f addresses convert to t addresses
              toAddressWithCorrectPrefix = clonedMsg.To[0] + To.slice(1);
              return _context9.abrupt("return", new Message({
                to: toAddressWithCorrectPrefix,
                from: message.From,
                value: Value,
                gasPremium: GasPremium,
                gasFeeCap: GasFeeCap,
                gasLimit: GasLimit,
                method: Method,
                nonce: Nonce,
                params: Params
              }));

            case 19:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x10) {
      return _ref9.apply(this, arguments);
    };
  }());

  _defineProperty(this, "gasEstimateMaxFee", /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(message) {
      var msgWithGas, feeCap, limit;
      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return _this.gasEstimateMessageGas(message);

            case 2:
              msgWithGas = _context10.sent.toLotusType();
              feeCap = new BigNumber(msgWithGas.GasFeeCap);
              limit = new BigNumber(msgWithGas.GasLimit);
              return _context10.abrupt("return", {
                maxFee: new FilecoinNumber(feeCap.times(limit), 'attofil'),
                message: msgWithGas
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x11) {
      return _ref10.apply(this, arguments);
    };
  }());

  _defineProperty(this, "gasCalcTxFee", /*#__PURE__*/function () {
    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(gasFeeCap, gasPremium, gasLimit, baseFee, gasUsed) {
      var gasFeeCapBN, gasPremiumBN, gasLimitBN, baseFeeBN, gasUsedBN, gasToBurn, totalGas, minBaseFeeFeeCap, leftSide, minTip, rightSide;
      return _regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              gasFeeCapBN = new BigNumber(gasFeeCap);
              gasPremiumBN = new BigNumber(gasPremium);
              gasLimitBN = new BigNumber(gasLimit);
              baseFeeBN = new BigNumber(baseFee);
              gasUsedBN = new BigNumber(gasUsed);
              /* compute left side */

              gasToBurn = computeGasToBurn(gasUsedBN, gasLimitBN);
              totalGas = gasUsedBN.plus(gasToBurn);
              minBaseFeeFeeCap = BigNumber.minimum(baseFeeBN, gasFeeCapBN);
              leftSide = totalGas.times(minBaseFeeFeeCap);
              /* compute right side */

              minTip = BigNumber.minimum(gasFeeCapBN.minus(baseFeeBN), gasPremiumBN);
              rightSide = gasLimitBN.times(BigNumber.maximum(0, minTip));
              return _context11.abrupt("return", new FilecoinNumber(leftSide.plus(rightSide), 'attofil'));

            case 12:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x12, _x13, _x14, _x15, _x16) {
      return _ref11.apply(this, arguments);
    };
  }());

  _defineProperty(this, "getReplaceMessageGasParams", /*#__PURE__*/function () {
    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(message) {
      var maxFee,
          _yield$_this$getRepla,
          minGasFeeCap,
          minGasLimit,
          minGasPremium,
          copiedMessage,
          _yield$_this$gasEstim,
          recommendedGasFeeCap,
          recommendedGasLimit,
          recommendedGasPremium,
          takeMin,
          _args12 = arguments;

      return _regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              maxFee = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : new FilecoinNumber('0.1', 'fil').toAttoFil();
              _context12.next = 3;
              return _this.getReplaceMessageMinGasParams(message);

            case 3:
              _yield$_this$getRepla = _context12.sent;
              minGasFeeCap = _yield$_this$getRepla.gasFeeCap;
              minGasLimit = _yield$_this$getRepla.gasLimit;
              minGasPremium = _yield$_this$getRepla.gasPremium;
              copiedMessage = _objectSpread({}, message);
              copiedMessage.GasFeeCap = '0';
              copiedMessage.GasPremium = '0';
              copiedMessage.GasLimit = 0;
              _context12.next = 13;
              return _this.gasEstimateMessageGas(copiedMessage, maxFee);

            case 13:
              _yield$_this$gasEstim = _context12.sent.toLotusType();
              recommendedGasFeeCap = _yield$_this$gasEstim.GasFeeCap;
              recommendedGasLimit = _yield$_this$gasEstim.GasLimit;
              recommendedGasPremium = _yield$_this$gasEstim.GasPremium;
              // assume we take the recommended prices
              takeMin = false; // if any of the minimum amounts are greater than the recommended,
              // take the minimum amounts

              if (num1GreaterThanNum2(minGasFeeCap, recommendedGasFeeCap)) takeMin = true;
              if (num1GreaterThanNum2(minGasLimit, recommendedGasLimit)) takeMin = true;
              if (num1GreaterThanNum2(minGasPremium, recommendedGasPremium)) takeMin = true;

              if (!takeMin) {
                _context12.next = 23;
                break;
              }

              return _context12.abrupt("return", {
                gasFeeCap: minGasFeeCap,
                gasLimit: minGasLimit,
                gasPremium: minGasPremium
              });

            case 23:
              return _context12.abrupt("return", {
                gasFeeCap: recommendedGasFeeCap,
                gasLimit: recommendedGasLimit,
                gasPremium: recommendedGasPremium
              });

            case 24:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x17) {
      return _ref12.apply(this, arguments);
    };
  }());

  _defineProperty(this, "getReplaceMessageMinGasParams", /*#__PURE__*/function () {
    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(message) {
      var newFeeCap, newPremium;
      return _regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              newFeeCap = message.GasFeeCap;
              newPremium = new BigNumber(message.GasPremium).multipliedBy(125).dividedBy(100);

              if (newPremium.isGreaterThan(message.GasFeeCap)) {
                newFeeCap = newPremium.toFixed(0, BigNumber.ROUND_CEIL);
              }

              return _context13.abrupt("return", {
                gasFeeCap: newFeeCap,
                gasPremium: newPremium.toFixed(0, BigNumber.ROUND_CEIL),
                gasLimit: message.GasLimit
              });

            case 4:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x18) {
      return _ref13.apply(this, arguments);
    };
  }());

  if (!provider) throw new Error('No provider provided.');
  this.wallet = provider;
  this.jsonRpcEngine = new LotusRpcEngine(config);
};
//# sourceMappingURL=filecoin.js.map