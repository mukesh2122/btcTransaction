{"version":3,"sources":["../src/filecoin.ts"],"names":["LotusRpcEngine","FilecoinNumber","checkAddressString","Message","computeGasToBurn","KNOWN_TYPE_0_ADDRESS","KNOWN_TYPE_1_ADDRESS","KNOWN_TYPE_3_ADDRESS","allCallsExitWithCode0","BigNumber","num1GreaterThanNum2","Filecoin","provider","config","apiAddress","address","jsonRpcEngine","request","balance","message","res","signature","Error","signedMessage","Signature","Type","Data","Number","nonce","toLowerCase","includes","clonedMsg","Object","assign","From","networkPrefix","cloneMsgWOnChainFromAddr","feeCap","gasLimit","numBlocksIncluded","GasLimit","gasPremium","maxFee","toAttoFil","MaxFee","To","Value","GasPremium","GasFeeCap","Method","Nonce","Params","toAddressWithCorrectPrefix","slice","to","from","value","gasFeeCap","method","params","gasEstimateMessageGas","msgWithGas","toLotusType","limit","times","baseFee","gasUsed","gasFeeCapBN","gasPremiumBN","gasLimitBN","baseFeeBN","gasUsedBN","gasToBurn","totalGas","plus","minBaseFeeFeeCap","minimum","leftSide","minTip","minus","rightSide","maximum","getReplaceMessageMinGasParams","minGasFeeCap","minGasLimit","minGasPremium","copiedMessage","recommendedGasFeeCap","recommendedGasLimit","recommendedGasPremium","takeMin","newFeeCap","newPremium","multipliedBy","dividedBy","isGreaterThan","toFixed","ROUND_CEIL","wallet"],"mappings":"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","sourcesContent":["import LotusRpcEngine, { LotusRpcEngineConfig } from '@glif/filecoin-rpc-client'\nimport { FilecoinNumber } from '@glif/filecoin-number'\nimport { checkAddressString, Network } from '@glif/filecoin-address'\nimport { LotusMessage, Message } from '@glif/filecoin-message'\nimport {\n  computeGasToBurn,\n  KNOWN_TYPE_0_ADDRESS,\n  KNOWN_TYPE_1_ADDRESS,\n  KNOWN_TYPE_3_ADDRESS,\n  allCallsExitWithCode0,\n} from './utils'\nimport { BigNumber } from 'bignumber.js'\nimport { WalletSubProvider } from './wallet-sub-provider'\nimport { InvocResult, CID } from './types'\nimport { num1GreaterThanNum2 } from './utils'\n\nexport class Filecoin {\n  public wallet: WalletSubProvider\n  public jsonRpcEngine: LotusRpcEngine\n\n  constructor(\n    provider: WalletSubProvider,\n    config: LotusRpcEngineConfig = {\n      apiAddress: 'http://127.0.0.1:1234/rpc/v0',\n    },\n  ) {\n    if (!provider) throw new Error('No provider provided.')\n    this.wallet = provider\n    this.jsonRpcEngine = new LotusRpcEngine(config)\n  }\n\n  getBalance = async (address: string): Promise<FilecoinNumber> => {\n    checkAddressString(address)\n    const balance = await this.jsonRpcEngine.request<string>(\n      'WalletBalance',\n      address,\n    )\n    return new FilecoinNumber(balance, 'attofil')\n  }\n\n  simulateMessage = async (message: LotusMessage): Promise<boolean> => {\n    const res = await this.jsonRpcEngine.request<InvocResult>(\n      'StateCall',\n      message,\n      null,\n    )\n    return allCallsExitWithCode0(res)\n  }\n\n  sendMessage = async (\n    message: LotusMessage,\n    signature: string,\n  ): Promise<CID> => {\n    if (!message) throw new Error('No message provided.')\n    if (!signature) throw new Error('No signature provided.')\n    const signedMessage = {\n      Message: message,\n      Signature: {\n        // wallet only supports secp256k1 keys for now\n        Type: 1,\n        Data: signature,\n      },\n    }\n\n    return this.jsonRpcEngine.request<{ '/': string }>(\n      'MpoolPush',\n      signedMessage,\n    )\n  }\n\n  getNonce = async (address: string): Promise<number> => {\n    if (!address) throw new Error('No address provided.')\n    checkAddressString(address)\n    try {\n      const nonce = Number(\n        await this.jsonRpcEngine.request('MpoolGetNonce', address),\n      )\n      return nonce\n    } catch (err) {\n      if (\n        err &&\n        err.message &&\n        err.message.toLowerCase().includes('actor not found')\n      )\n        return 0\n      throw new Error(err)\n    }\n  }\n\n  cloneMsgWOnChainFromAddr = async (\n    message: LotusMessage,\n  ): Promise<LotusMessage> => {\n    const clonedMsg = Object.assign({}, message)\n    try {\n      // state call errs if the from address does not exist on chain yet, lookup from actor ID to know this for sure\n      await this.jsonRpcEngine.request('StateLookupID', clonedMsg.From, null)\n    } catch (err) {\n      // if from actor doesnt exist, use a hardcoded known actor address\n      if (err.message.toLowerCase().includes('actor not found')) {\n        const networkPrefix = clonedMsg.From[0] as Network\n\n        if (!clonedMsg.From)\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix]\n        if (clonedMsg.From[1] === '0')\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix]\n        else if (clonedMsg.From[1] === '1')\n          clonedMsg.From = KNOWN_TYPE_1_ADDRESS[networkPrefix]\n        else if (clonedMsg.From[1] === '3')\n          clonedMsg.From = KNOWN_TYPE_3_ADDRESS[networkPrefix]\n        else {\n          // this should never happen, only t1 and t3 addresses can be used as a from?\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix]\n        }\n      }\n    }\n    return clonedMsg\n  }\n\n  gasEstimateFeeCap = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const feeCap = await this.jsonRpcEngine.request<string>(\n      'GasEstimateFeeCap',\n      clonedMsg,\n      0,\n      null,\n    )\n\n    return new FilecoinNumber(feeCap, 'attofil')\n  }\n\n  gasEstimateGasLimit = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasLimit = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasLimit',\n      clonedMsg,\n      null,\n    )\n\n    return new FilecoinNumber(gasLimit, 'attofil')\n  }\n\n  gasEstimateGasPremium = async (\n    message: LotusMessage,\n    numBlocksIncluded: number = 0,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasPremium = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasPremium',\n      numBlocksIncluded,\n      clonedMsg.From,\n      clonedMsg.GasLimit || 0,\n      null,\n    )\n\n    return new FilecoinNumber(gasPremium, 'attofil')\n  }\n\n  gasEstimateMessageGas = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<Message> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const {\n      To,\n      Value,\n      GasPremium,\n      GasFeeCap,\n      GasLimit,\n      Method,\n      Nonce,\n      Params,\n    } = await this.jsonRpcEngine.request(\n      'GasEstimateMessageGas',\n      clonedMsg,\n      { MaxFee: maxFee },\n      null,\n    )\n\n    // this is a hack to get by weird UI bugs where f addresses convert to t addresses\n    const toAddressWithCorrectPrefix = clonedMsg.To[0] + To.slice(1)\n    return new Message({\n      to: toAddressWithCorrectPrefix,\n      from: message.From,\n      value: Value,\n      gasPremium: GasPremium,\n      gasFeeCap: GasFeeCap,\n      gasLimit: GasLimit,\n      method: Method,\n      nonce: Nonce,\n      params: Params,\n    })\n  }\n\n  gasEstimateMaxFee = async (\n    message: LotusMessage,\n  ): Promise<{ maxFee: FilecoinNumber; message: LotusMessage }> => {\n    const msgWithGas = (await this.gasEstimateMessageGas(message)).toLotusType()\n    const feeCap = new BigNumber(msgWithGas.GasFeeCap)\n    const limit = new BigNumber(msgWithGas.GasLimit)\n    return {\n      maxFee: new FilecoinNumber(feeCap.times(limit), 'attofil'),\n      message: msgWithGas,\n    }\n  }\n\n  /**\n   * formula (some of these variable names might not be the best...):\n   * (GasUsed+GasToBurn)*min(BaseFee, FeeCap)+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium)))\n   *\n   * minBaseFeeFeeCap = min(BaseFee, FeeCap)\n   * totalGas = GasUsed+GasToBurn\n   * leftSide = totalGas*minBaseFeeFeeCap\n   *\n   * minTip = min(FeeCap-BaseFee, GasPremium)\n   * rightSide = gasLimit*max(0, minTip)\n   *\n   * paidByMessageSender =\n   * leftSide + rightSide\n   */\n  gasCalcTxFee = async (\n    gasFeeCap: string,\n    gasPremium: string,\n    gasLimit: number,\n    baseFee: string,\n    gasUsed: string,\n  ): Promise<FilecoinNumber> => {\n    const gasFeeCapBN = new BigNumber(gasFeeCap)\n    const gasPremiumBN = new BigNumber(gasPremium)\n    const gasLimitBN = new BigNumber(gasLimit)\n    const baseFeeBN = new BigNumber(baseFee)\n    const gasUsedBN = new BigNumber(gasUsed)\n\n    /* compute left side */\n    const gasToBurn = computeGasToBurn(gasUsedBN, gasLimitBN)\n    const totalGas = gasUsedBN.plus(gasToBurn)\n    const minBaseFeeFeeCap = BigNumber.minimum(baseFeeBN, gasFeeCapBN)\n    const leftSide = totalGas.times(minBaseFeeFeeCap)\n\n    /* compute right side */\n    const minTip = BigNumber.minimum(gasFeeCapBN.minus(baseFeeBN), gasPremiumBN)\n    const rightSide = gasLimitBN.times(BigNumber.maximum(0, minTip))\n\n    return new FilecoinNumber(leftSide.plus(rightSide), 'attofil')\n  }\n\n  /*\n   * Used for calculating gas params of replaced messages\n   * To get the params - we compare the minimum bump in gas (gas premium * 1.25)\n   * against the recommended gas params (taken from gasEstimateMessageGas, maxFee = .1)\n   *\n   * If any of the 3 gas params in the recommended gas amounts are LESS\n   * than the params calculated in the minimum bump in gas, take the minimum bump in gas\n   *\n   */\n\n  getReplaceMessageGasParams = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<{ gasFeeCap: string; gasPremium: string; gasLimit: number }> => {\n    const {\n      gasFeeCap: minGasFeeCap,\n      gasLimit: minGasLimit,\n      gasPremium: minGasPremium,\n    } = await this.getReplaceMessageMinGasParams(message)\n\n    const copiedMessage = { ...message }\n    copiedMessage.GasFeeCap = '0'\n    copiedMessage.GasPremium = '0'\n    copiedMessage.GasLimit = 0\n    const {\n      GasFeeCap: recommendedGasFeeCap,\n      GasLimit: recommendedGasLimit,\n      GasPremium: recommendedGasPremium,\n    } = (await this.gasEstimateMessageGas(copiedMessage, maxFee)).toLotusType()\n\n    // assume we take the recommended prices\n    let takeMin = false\n\n    // if any of the minimum amounts are greater than the recommended,\n    // take the minimum amounts\n    if (num1GreaterThanNum2(minGasFeeCap, recommendedGasFeeCap)) takeMin = true\n    if (num1GreaterThanNum2(minGasLimit, recommendedGasLimit)) takeMin = true\n    if (num1GreaterThanNum2(minGasPremium, recommendedGasPremium))\n      takeMin = true\n\n    if (takeMin) {\n      return {\n        gasFeeCap: minGasFeeCap,\n        gasLimit: minGasLimit,\n        gasPremium: minGasPremium,\n      }\n    }\n    return {\n      gasFeeCap: recommendedGasFeeCap,\n      gasLimit: recommendedGasLimit,\n      gasPremium: recommendedGasPremium,\n    }\n  }\n\n  /**\n   * Used for calculating the minimum boost in gas params to replace a message\n   *  (1.25x prev gasPremium, bump fee cap as needed)\n   */\n  getReplaceMessageMinGasParams = async (\n    message: LotusMessage,\n  ): Promise<{ gasFeeCap: string; gasPremium: string; gasLimit: number }> => {\n    let newFeeCap = message.GasFeeCap\n    const newPremium = new BigNumber(message.GasPremium)\n      .multipliedBy(125)\n      .dividedBy(100)\n\n    if (newPremium.isGreaterThan(message.GasFeeCap)) {\n      newFeeCap = newPremium.toFixed(0, BigNumber.ROUND_CEIL)\n    }\n\n    return {\n      gasFeeCap: newFeeCap,\n      gasPremium: newPremium.toFixed(0, BigNumber.ROUND_CEIL),\n      gasLimit: message.GasLimit,\n    }\n  }\n}\n"],"file":"filecoin.js"}