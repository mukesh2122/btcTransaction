"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Message = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _filecoinAddress = require("@glif/filecoin-address");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_bignumber["default"].set({
  ROUNDING_MODE: _bignumber["default"].ROUND_HALF_DOWN
});

_bignumber["default"].config({
  EXPONENTIAL_AT: 1e9
});

var Message = function Message(msg) {
  var _this = this;

  _classCallCheck(this, Message);

  _defineProperty(this, "to", void 0);

  _defineProperty(this, "from", void 0);

  _defineProperty(this, "nonce", void 0);

  _defineProperty(this, "method", void 0);

  _defineProperty(this, "value", void 0);

  _defineProperty(this, "gasPremium", void 0);

  _defineProperty(this, "gasFeeCap", void 0);

  _defineProperty(this, "gasLimit", void 0);

  _defineProperty(this, "params", void 0);

  _defineProperty(this, "toLotusType", function () {
    return {
      To: _this.to,
      From: _this.from,
      Nonce: _this.nonce,
      Value: _this.value.toFixed(0, 1),
      GasPremium: _this.gasPremium.toFixed(0, 1),
      GasFeeCap: _this.gasFeeCap.toFixed(0, 1),
      GasLimit: _this.gasLimit,
      Method: _this.method,
      Params: _this.params
    };
  });

  _defineProperty(this, "toSerializeableType", function () {
    return {
      to: _this.to,
      from: _this.from,
      nonce: _this.nonce,
      value: _this.value.toFixed(0, 1),
      gaspremium: _this.gasPremium.toFixed(0, 1),
      gasfeecap: _this.gasFeeCap.toFixed(0, 1),
      gaslimit: _this.gasLimit,
      method: _this.method,
      params: _this.params
    };
  });

  typeCheck(msg);
  this.to = msg.to;
  this.from = msg.from;
  this.nonce = msg.nonce;
  this.value = new _bignumber["default"](msg.value);
  this.gasPremium = new _bignumber["default"](msg.gasPremium || '0');
  this.gasFeeCap = new _bignumber["default"](msg.gasFeeCap || '0');
  this.gasLimit = msg.gasLimit || 0;
  this.method = msg.method;
  this.params = msg.params;
};

exports.Message = Message;

var typeCheck = function typeCheck(msg) {
  if (!msg.to) throw new Error('No to address provided');
  if (!msg.from) throw new Error('No from address provided');
  if (!(0, _filecoinAddress.validateAddressString)(msg.to)) throw new Error('Invalid to address provided');
  if (!(0, _filecoinAddress.validateAddressString)(msg.from)) throw new Error('Invalid from address provided');
  if (!msg.nonce && msg.nonce !== 0) throw new Error('No nonce provided');
  if (typeof msg.nonce !== 'number') throw new Error('Nonce is not a number');
  if (!(msg.nonce <= Number.MAX_SAFE_INTEGER)) throw new Error('Nonce must be smaller than Number.MAX_SAFE_INTEGER');
  if (!msg.value) throw new Error('No value provided');
  if (msg.gasLimit && typeof msg.gasLimit !== 'number') throw new Error('Gas limit is not a number');
  if (msg.gasLimit && !(msg.gasLimit <= Number.MAX_SAFE_INTEGER)) throw new Error('Gas limit must be smaller than Number.MAX_SAFE_INTEGER');
  if (!msg.method && msg.method !== 0) throw new Error('No method provided');
  if (typeof msg.method !== 'number') throw new Error('Method is not a number');
  if (!(msg.method <= Number.MAX_SAFE_INTEGER)) throw new Error('Method must be smaller than Number.MAX_SAFE_INTEGER');
};

var _default = {
  Message: Message
};
exports["default"] = _default;
//# sourceMappingURL=index.js.map