{"version":3,"sources":["../src/index.ts"],"names":["BigNumber","set","ROUNDING_MODE","ROUND_HALF_DOWN","config","EXPONENTIAL_AT","Message","msg","To","to","From","from","Nonce","nonce","Value","value","toFixed","GasPremium","gasPremium","GasFeeCap","gasFeeCap","GasLimit","gasLimit","Method","method","Params","params","gaspremium","gasfeecap","gaslimit","typeCheck","Error","Number","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { validateAddressString } from '@glif/filecoin-address'\n\nBigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN })\nBigNumber.config({ EXPONENTIAL_AT: 1e9 })\n\nexport interface SerializableMessage {\n  readonly to: string\n  readonly from: string\n  readonly nonce: number\n  readonly value: string\n  readonly gaspremium: string\n  readonly gaslimit: number\n  readonly gasfeecap: string\n  readonly method: number\n  readonly params: string | string[] | undefined\n}\n\nexport interface LotusMessage {\n  To: string\n  From: string\n  Nonce: number\n  Value: string\n  GasPremium: string\n  GasLimit: number\n  GasFeeCap: string\n  GasPrice?: string\n  Method: number\n  Params?: string | string[]\n}\n\nexport interface SignedLotusMessage {\n  Message: LotusMessage\n  Signature: {\n    Type: number\n    Data: string\n  }\n}\n\nexport interface MessageObj {\n  to: string\n  from: string\n  nonce: number\n  value: any\n  method: number\n  gasPremium?: string | number\n  gasFeeCap?: string | number\n  gasLimit?: number\n  gasPrice?: string | number\n  params?: string | string[]\n}\n\nexport class Message {\n  private to: string\n  private from: string\n  private nonce: number\n  private method: number\n  private value: BigNumber\n  private gasPremium: BigNumber\n  private gasFeeCap: BigNumber\n  private gasLimit: number\n  private params: string | string[] | undefined\n\n  public constructor(msg: MessageObj) {\n    typeCheck(msg)\n    this.to = msg.to\n    this.from = msg.from\n    this.nonce = msg.nonce\n    this.value = new BigNumber(msg.value)\n    this.gasPremium = new BigNumber(msg.gasPremium || '0')\n    this.gasFeeCap = new BigNumber(msg.gasFeeCap || '0')\n    this.gasLimit = msg.gasLimit || 0\n    this.method = msg.method\n    this.params = msg.params\n  }\n\n  public toLotusType = (): LotusMessage => {\n    return {\n      To: this.to,\n      From: this.from,\n      Nonce: this.nonce,\n      Value: this.value.toFixed(0, 1),\n      GasPremium: this.gasPremium.toFixed(0, 1),\n      GasFeeCap: this.gasFeeCap.toFixed(0, 1),\n      GasLimit: this.gasLimit,\n      Method: this.method,\n      Params: this.params\n    }\n  }\n\n  public toSerializeableType = (): SerializableMessage => {\n    return {\n      to: this.to,\n      from: this.from,\n      nonce: this.nonce,\n      value: this.value.toFixed(0, 1),\n      gaspremium: this.gasPremium.toFixed(0, 1),\n      gasfeecap: this.gasFeeCap.toFixed(0, 1),\n      gaslimit: this.gasLimit,\n      method: this.method,\n      params: this.params\n    }\n  }\n}\n\nconst typeCheck = (msg: MessageObj): void => {\n  if (!msg.to) throw new Error('No to address provided')\n  if (!msg.from) throw new Error('No from address provided')\n\n  if (!validateAddressString(msg.to))\n    throw new Error('Invalid to address provided')\n  if (!validateAddressString(msg.from))\n    throw new Error('Invalid from address provided')\n\n  if (!msg.nonce && msg.nonce !== 0) throw new Error('No nonce provided')\n  if (typeof msg.nonce !== 'number') throw new Error('Nonce is not a number')\n  if (!(msg.nonce <= Number.MAX_SAFE_INTEGER))\n    throw new Error('Nonce must be smaller than Number.MAX_SAFE_INTEGER')\n\n  if (!msg.value) throw new Error('No value provided')\n\n  if (msg.gasLimit && typeof msg.gasLimit !== 'number')\n    throw new Error('Gas limit is not a number')\n  if (msg.gasLimit && !(msg.gasLimit <= Number.MAX_SAFE_INTEGER))\n    throw new Error('Gas limit must be smaller than Number.MAX_SAFE_INTEGER')\n\n  if (!msg.method && msg.method !== 0) throw new Error('No method provided')\n  if (typeof msg.method !== 'number') throw new Error('Method is not a number')\n  if (!(msg.method <= Number.MAX_SAFE_INTEGER))\n    throw new Error('Method must be smaller than Number.MAX_SAFE_INTEGER')\n}\n\nexport default {\n  Message\n}\n"],"file":"index.js"}