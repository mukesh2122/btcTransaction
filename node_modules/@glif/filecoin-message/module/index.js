function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import BigNumber from 'bignumber.js';
import { validateAddressString } from '@glif/filecoin-address';
BigNumber.set({
  ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN
});
BigNumber.config({
  EXPONENTIAL_AT: 1e9
});
export class Message {
  constructor(msg) {
    _defineProperty(this, "to", void 0);

    _defineProperty(this, "from", void 0);

    _defineProperty(this, "nonce", void 0);

    _defineProperty(this, "method", void 0);

    _defineProperty(this, "value", void 0);

    _defineProperty(this, "gasPremium", void 0);

    _defineProperty(this, "gasFeeCap", void 0);

    _defineProperty(this, "gasLimit", void 0);

    _defineProperty(this, "params", void 0);

    _defineProperty(this, "toLotusType", () => {
      return {
        To: this.to,
        From: this.from,
        Nonce: this.nonce,
        Value: this.value.toFixed(0, 1),
        GasPremium: this.gasPremium.toFixed(0, 1),
        GasFeeCap: this.gasFeeCap.toFixed(0, 1),
        GasLimit: this.gasLimit,
        Method: this.method,
        Params: this.params
      };
    });

    _defineProperty(this, "toSerializeableType", () => {
      return {
        to: this.to,
        from: this.from,
        nonce: this.nonce,
        value: this.value.toFixed(0, 1),
        gaspremium: this.gasPremium.toFixed(0, 1),
        gasfeecap: this.gasFeeCap.toFixed(0, 1),
        gaslimit: this.gasLimit,
        method: this.method,
        params: this.params
      };
    });

    typeCheck(msg);
    this.to = msg.to;
    this.from = msg.from;
    this.nonce = msg.nonce;
    this.value = new BigNumber(msg.value);
    this.gasPremium = new BigNumber(msg.gasPremium || '0');
    this.gasFeeCap = new BigNumber(msg.gasFeeCap || '0');
    this.gasLimit = msg.gasLimit || 0;
    this.method = msg.method;
    this.params = msg.params;
  }

}

const typeCheck = msg => {
  if (!msg.to) throw new Error('No to address provided');
  if (!msg.from) throw new Error('No from address provided');
  if (!validateAddressString(msg.to)) throw new Error('Invalid to address provided');
  if (!validateAddressString(msg.from)) throw new Error('Invalid from address provided');
  if (!msg.nonce && msg.nonce !== 0) throw new Error('No nonce provided');
  if (typeof msg.nonce !== 'number') throw new Error('Nonce is not a number');
  if (!(msg.nonce <= Number.MAX_SAFE_INTEGER)) throw new Error('Nonce must be smaller than Number.MAX_SAFE_INTEGER');
  if (!msg.value) throw new Error('No value provided');
  if (msg.gasLimit && typeof msg.gasLimit !== 'number') throw new Error('Gas limit is not a number');
  if (msg.gasLimit && !(msg.gasLimit <= Number.MAX_SAFE_INTEGER)) throw new Error('Gas limit must be smaller than Number.MAX_SAFE_INTEGER');
  if (!msg.method && msg.method !== 0) throw new Error('No method provided');
  if (typeof msg.method !== 'number') throw new Error('Method is not a number');
  if (!(msg.method <= Number.MAX_SAFE_INTEGER)) throw new Error('Method must be smaller than Number.MAX_SAFE_INTEGER');
};

export default {
  Message
};
//# sourceMappingURL=index.js.map