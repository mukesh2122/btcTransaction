"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOGEHandler = exports._apiFallbacks = void 0;
const blockchair_1 = require("../../common/apis/blockchair");
const sochain_1 = require("../../common/apis/sochain");
const retry_1 = require("../../lib/retry");
const utils_1 = require("../../lib/utils");
exports._apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        () => sochain_1.Sochain.fetchUTXO(testnet ? "DOGETEST" : "DOGE")(txHash, vOut),
        ...(0, utils_1.shuffleArray)((0, retry_1.onlyMainnet)(() => blockchair_1.Blockchair.fetchUTXO(blockchair_1.Blockchair.networks.DOGECOIN)(txHash, vOut), true)),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        () => sochain_1.Sochain.fetchUTXOs(testnet ? "DOGETEST" : "DOGE")(address, confirmations),
        ...(0, utils_1.shuffleArray)((0, retry_1.onlyMainnet)(() => blockchair_1.Blockchair.fetchUTXOs(blockchair_1.Blockchair.networks.DOGECOIN)(address, confirmations), testnet)),
    ],
    fetchTXs: (testnet, address, confirmations = 0) => [
        () => sochain_1.Sochain.fetchTXs(testnet ? "DOGETEST" : "DOGE")(address, confirmations),
        ...(0, utils_1.shuffleArray)((0, retry_1.onlyMainnet)(() => blockchair_1.Blockchair.fetchTXs(blockchair_1.Blockchair.networks.DOGECOIN)(address, confirmations), testnet)),
    ],
    broadcastTransaction: (testnet, hex) => [
        () => sochain_1.Sochain.broadcastTransaction(testnet ? "DOGETEST" : "DOGE")(hex),
        ...(0, utils_1.shuffleArray)((0, retry_1.onlyMainnet)(() => blockchair_1.Blockchair.broadcastTransaction(blockchair_1.Blockchair.networks.DOGECOIN)(hex), testnet)),
    ],
};
class DOGEHandler {
}
exports.DOGEHandler = DOGEHandler;
_a = DOGEHandler;
DOGEHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchUTXOs(testnet, options.address, confirmations);
    return (0, retry_1.fallback)(endpoints);
};
DOGEHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return (0, retry_1.fallback)(endpoints);
};
DOGEHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchTXs(testnet, options.address, confirmations);
    return (0, retry_1.fallback)(endpoints);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9HRUhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaGFuZGxlcnMvRE9HRS9ET0dFSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsNkRBQTBEO0FBQzFELHVEQUFvRDtBQUNwRCwyQ0FBd0Q7QUFDeEQsMkNBQStDO0FBR2xDLFFBQUEsYUFBYSxHQUFHO0lBQ3pCLFNBQVMsRUFBRSxDQUFDLE9BQWdCLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFLENBQUM7UUFDM0QsR0FBRyxFQUFFLENBQUMsaUJBQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7UUFDcEUsR0FBRyxJQUFBLG9CQUFZLEVBQ1gsSUFBQSxtQkFBVyxFQUNQLEdBQUcsRUFBRSxDQUNELHVCQUFVLENBQUMsU0FBUyxDQUFDLHVCQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUM5QyxNQUFNLEVBQ04sSUFBSSxDQUNQLEVBQ0wsSUFBSSxDQUNQLENBQ0o7S0FDSjtJQUVELFVBQVUsRUFBRSxDQUFDLE9BQWdCLEVBQUUsT0FBZSxFQUFFLGFBQXFCLEVBQUUsRUFBRSxDQUFDO1FBQ3RFLEdBQUcsRUFBRSxDQUNELGlCQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FDN0MsT0FBTyxFQUNQLGFBQWEsQ0FDaEI7UUFDTCxHQUFHLElBQUEsb0JBQVksRUFDWCxJQUFBLG1CQUFXLEVBQ1AsR0FBRyxFQUFFLENBQ0QsdUJBQVUsQ0FBQyxVQUFVLENBQUMsdUJBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQy9DLE9BQU8sRUFDUCxhQUFhLENBQ2hCLEVBQ0wsT0FBTyxDQUNWLENBQ0o7S0FDSjtJQUVELFFBQVEsRUFBRSxDQUNOLE9BQWdCLEVBQ2hCLE9BQWUsRUFDZixnQkFBd0IsQ0FBQyxFQUMzQixFQUFFLENBQUM7UUFDRCxHQUFHLEVBQUUsQ0FDRCxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQzNDLE9BQU8sRUFDUCxhQUFhLENBQ2hCO1FBQ0wsR0FBRyxJQUFBLG9CQUFZLEVBQ1gsSUFBQSxtQkFBVyxFQUNQLEdBQUcsRUFBRSxDQUNELHVCQUFVLENBQUMsUUFBUSxDQUFDLHVCQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUM3QyxPQUFPLEVBQ1AsYUFBYSxDQUNoQixFQUNMLE9BQU8sQ0FDVixDQUNKO0tBQ0o7SUFFRCxvQkFBb0IsRUFBRSxDQUFDLE9BQWdCLEVBQUUsR0FBVyxFQUFFLEVBQUUsQ0FBQztRQUNyRCxHQUFHLEVBQUUsQ0FBQyxpQkFBTyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDdEUsR0FBRyxJQUFBLG9CQUFZLEVBQ1gsSUFBQSxtQkFBVyxFQUNQLEdBQUcsRUFBRSxDQUNELHVCQUFVLENBQUMsb0JBQW9CLENBQzNCLHVCQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDL0IsQ0FBQyxHQUFHLENBQUMsRUFDVixPQUFPLENBQ1YsQ0FDSjtLQUNKO0NBQ0osQ0FBQztBQUVGLE1BQWEsV0FBVzs7QUFBeEIsa0NBMkNDOztBQTFDVSxvQkFBUSxHQUFHLEtBQUssRUFDbkIsT0FBZ0IsRUFDaEIsT0FBb0QsRUFDNUIsRUFBRTtJQUMxQixNQUFNLGFBQWEsR0FDZixPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsS0FBSyxTQUFTO1FBQzFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYTtRQUN2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRVosTUFBTSxTQUFTLEdBQUcscUJBQWEsQ0FBQyxVQUFVLENBQ3RDLE9BQU8sRUFDUCxPQUFPLENBQUMsT0FBTyxFQUNmLGFBQWEsQ0FDaEIsQ0FBQztJQUNGLE9BQU8sSUFBQSxnQkFBUSxFQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLENBQUUsQ0FBQTtBQUVLLG1CQUFPLEdBQUcsS0FBSyxFQUNsQixPQUFnQixFQUNoQixNQUFjLEVBQ2QsSUFBWSxFQUNDLEVBQUU7SUFDZixNQUFNLFNBQVMsR0FBRyxxQkFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLE9BQU8sSUFBQSxnQkFBUSxFQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLENBQUUsQ0FBQTtBQUVLLDJCQUFlLEdBQUcsS0FBSyxFQUMxQixPQUFnQixFQUNoQixPQUFvRCxFQUM1QixFQUFFO0lBQzFCLE1BQU0sYUFBYSxHQUNmLE9BQU8sSUFBSSxPQUFPLENBQUMsYUFBYSxLQUFLLFNBQVM7UUFDMUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixNQUFNLFNBQVMsR0FBRyxxQkFBYSxDQUFDLFFBQVEsQ0FDcEMsT0FBTyxFQUNQLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsYUFBYSxDQUNoQixDQUFDO0lBQ0YsT0FBTyxJQUFBLGdCQUFRLEVBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsQ0FBRSxDQUFBIn0=