"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionConfig = exports.getNetwork = exports.Network = exports.getEndpoint = exports.getEthersSigner = void 0;
const ethers_1 = require("ethers");
const getEthersSigner = (privateKey, endpoint) => {
    // const provider = new HDWalletProvider(privateKey, endpoint);
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(endpoint);
    const signer = new ethers_1.ethers.Wallet(privateKey, provider);
    return [signer, signer.address];
};
exports.getEthersSigner = getEthersSigner;
// Free tier - only used as a fallback.
const defaultInfuraKey = "3b7a6c29f9c048d688a848899888aa96";
const getEndpoint = (network, ethereumNode, infuraKey) => {
    return ethereumNode
        ? ethereumNode
        : `https://${network}.infura.io/v3/${infuraKey || defaultInfuraKey}`;
};
exports.getEndpoint = getEndpoint;
var Network;
(function (Network) {
    Network["Mainnet"] = "mainnet";
    Network["Ropsten"] = "ropsten";
    Network["Kovan"] = "kovan";
    Network["Rinkeby"] = "rinkeby";
    Network["G\u00F6rli"] = "goerli";
})(Network = exports.Network || (exports.Network = {}));
const getNetwork = (network) => {
    switch (network.toLowerCase()) {
        case "mainnet":
        case "main":
            return Network.Mainnet;
        case "kovan":
            return Network.Kovan;
        case "rinkeby":
            return Network.Rinkeby;
        case "görli":
        case "goerli":
        case "gorli":
            return Network.Görli;
        case "ropsten":
        case "testnet":
        default:
            return Network.Ropsten;
    }
};
exports.getNetwork = getNetwork;
// Create a `txConfig` object with only the relevant fields in the `options`
// object.
const getTransactionConfig = (options) => {
    const txConfig = {};
    // tslint:disable: no-object-mutation
    if (options.gasLimit) {
        txConfig.gasLimit = options.gasLimit;
    }
    if (options.gasPrice) {
        txConfig.gasPrice = options.gasPrice;
    }
    if (options.maxFeePerGas) {
        txConfig.maxFeePerGas = options.maxFeePerGas;
    }
    if (options.maxPriorityFeePerGas) {
        txConfig.maxPriorityFeePerGas = options.maxPriorityFeePerGas;
    }
    if (options.nonce) {
        txConfig.nonce = options.nonce;
    }
    if (options.type) {
        txConfig.type = options.type;
    }
    if (options.accessList) {
        txConfig.accessList = options.accessList;
    }
    if (options.customData) {
        txConfig.customData = options.customData;
    }
    return txConfig;
};
exports.getTransactionConfig = getTransactionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaGFuZGxlcnMvRVRIL2V0aFV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFpRTtBQUUxRCxNQUFNLGVBQWUsR0FBRyxDQUMzQixVQUFrQixFQUNsQixRQUFnQixFQUNPLEVBQUU7SUFDekIsK0RBQStEO0lBRS9ELE1BQU0sUUFBUSxHQUFHLElBQUksZUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFUVyxRQUFBLGVBQWUsbUJBUzFCO0FBRUYsdUNBQXVDO0FBQ3ZDLE1BQU0sZ0JBQWdCLEdBQUcsa0NBQWtDLENBQUM7QUFFckQsTUFBTSxXQUFXLEdBQUcsQ0FDdkIsT0FBMkIsRUFDM0IsWUFBZ0MsRUFDaEMsU0FBNkIsRUFDL0IsRUFBRTtJQUNBLE9BQU8sWUFBWTtRQUNmLENBQUMsQ0FBQyxZQUFZO1FBQ2QsQ0FBQyxDQUFDLFdBQVcsT0FBTyxpQkFBaUIsU0FBUyxJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBUlcsUUFBQSxXQUFXLGVBUXRCO0FBRUYsSUFBWSxPQU1YO0FBTkQsV0FBWSxPQUFPO0lBQ2YsOEJBQW1CLENBQUE7SUFDbkIsOEJBQW1CLENBQUE7SUFDbkIsMEJBQWUsQ0FBQTtJQUNmLDhCQUFtQixDQUFBO0lBQ25CLGdDQUFnQixDQUFBO0FBQ3BCLENBQUMsRUFOVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFNbEI7QUFFTSxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQWUsRUFBVyxFQUFFO0lBQ25ELFFBQVEsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQzNCLEtBQUssU0FBUyxDQUFDO1FBQ2YsS0FBSyxNQUFNO1lBQ1AsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRTNCLEtBQUssT0FBTztZQUNSLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztRQUV6QixLQUFLLFNBQVM7WUFDVixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFFM0IsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLFFBQVEsQ0FBQztRQUNkLEtBQUssT0FBTztZQUNSLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztRQUV6QixLQUFLLFNBQVMsQ0FBQztRQUNmLEtBQUssU0FBUyxDQUFDO1FBQ2Y7WUFDSSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7S0FDOUI7QUFDTCxDQUFDLENBQUM7QUF0QlcsUUFBQSxVQUFVLGNBc0JyQjtBQUVGLDRFQUE0RTtBQUM1RSxVQUFVO0FBQ0gsTUFBTSxvQkFBb0IsR0FBRyxDQUNoQyxPQUFVLEVBQ0QsRUFBRTtJQUNYLE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQztJQUV6QixxQ0FBcUM7SUFFckMsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1FBQ2xCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztLQUN4QztJQUNELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNsQixRQUFRLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7S0FDeEM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7UUFDdEIsUUFBUSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxPQUFPLENBQUMsb0JBQW9CLEVBQUU7UUFDOUIsUUFBUSxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztLQUNoRTtJQUNELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtRQUNmLFFBQVEsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUNsQztJQUNELElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtRQUNkLFFBQVEsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztLQUNoQztJQUNELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNwQixRQUFRLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDNUM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDcEIsUUFBUSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQzVDO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQyxDQUFDO0FBakNXLFFBQUEsb0JBQW9CLHdCQWlDL0IifQ==