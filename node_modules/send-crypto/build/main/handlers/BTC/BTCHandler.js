"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BTCHandler = exports._apiFallbacks = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const immutable_1 = require("immutable");
const blockchain_1 = require("../../common/apis/blockchain");
const blockchair_1 = require("../../common/apis/blockchair");
const blockstream_1 = require("../../common/apis/blockstream");
const electrumx_1 = require("../../common/apis/electrumx");
const jsonrpc_1 = require("../../common/apis/jsonrpc");
const sochain_1 = require("../../common/apis/sochain");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const utils_1 = require("../../lib/utils");
exports._apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        ...(0, utils_1.shuffleArray)(() => blockstream_1.Blockstream.fetchUTXO(testnet)(txHash, vOut), () => blockchair_1.Blockchair.fetchUTXO(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(txHash, vOut)),
        () => blockchain_1.Blockchain.fetchUTXO(testnet
            ? blockchain_1.BlockchainNetwork.BitcoinTestnet
            : blockchain_1.BlockchainNetwork.Bitcoin)(txHash, vOut),
    ],
    fetchUTXOs: (testnet, address, confirmations, scriptHash) => [
        ...(0, utils_1.shuffleArray)(() => blockstream_1.Blockstream.fetchUTXOs(testnet)(address, confirmations), () => blockchair_1.Blockchair.fetchUTXOs(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(address, confirmations)),
        () => sochain_1.Sochain.fetchUTXOs(testnet ? "BTCTEST" : "BTC")(address, confirmations),
        () => blockchain_1.Blockchain.fetchUTXOs(testnet
            ? blockchain_1.BlockchainNetwork.BitcoinTestnet
            : blockchain_1.BlockchainNetwork.Bitcoin)(address, confirmations),
        () => electrumx_1.ElectrumX.fetchUTXOs("bitcoin", testnet)(address, confirmations, scriptHash),
    ],
    fetchTXs: (testnet, address, confirmations = 0, scriptHash) => [
        ...(0, utils_1.shuffleArray)(() => blockstream_1.Blockstream.fetchTXs(testnet)(address), () => blockchair_1.Blockchair.fetchTXs(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(address, confirmations), () => sochain_1.Sochain.fetchTXs(testnet ? "BTCTEST" : "BTC")(address, confirmations), () => blockchain_1.Blockchain.fetchUTXOs(testnet
            ? blockchain_1.BlockchainNetwork.BitcoinTestnet
            : blockchain_1.BlockchainNetwork.Bitcoin)(address, confirmations)),
    ],
    broadcastTransaction: (testnet, hex) => [
        ...(0, utils_1.shuffleArray)(() => blockstream_1.Blockstream.broadcastTransaction(testnet)(hex), () => blockchair_1.Blockchair.broadcastTransaction(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(hex)),
        () => sochain_1.Sochain.broadcastTransaction(testnet ? "BTCTEST" : "BTC")(hex),
        () => jsonrpc_1.JSONRPC.broadcastTransaction(testnet ? jsonrpc_1.MULTICHAIN_URLS.BTCTEST : jsonrpc_1.MULTICHAIN_URLS.BTC)(hex),
        testnet
            ? undefined
            : () => blockchain_1.Blockchain.broadcastTransaction(blockchain_1.BlockchainNetwork.Bitcoin)(hex),
    ],
};
class BTCHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["BTC", "BITCOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await BTCHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: (options && options.address) || (await this.address(asset)) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = (0, promiEvent_1.newPromiEvent)();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = (0, immutable_1.List)(await BTCHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress })))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this.testnet
                    ? bitcoin.networks.testnet
                    : bitcoin.networks.bitcoin, this.privateKey, changeAddress, to, valueIn, utxos, options);
                txHash = await (0, retry_1.retryNTimes)(() => (0, retry_1.fallback)(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            (0, confirmations_1.subscribeToConfirmations)(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = async (txHash) => (await (0, retry_1.fallback)(
        // Fetch confirmations for first output of transaction.
        exports._apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations;
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.testnet : bitcoin.networks.bitcoin, privateKey);
    }
}
exports.BTCHandler = BTCHandler;
_a = BTCHandler;
BTCHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchUTXOs(testnet, options.address, confirmations, options.scriptHash);
    return (0, retry_1.fallback)(endpoints);
};
BTCHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return (0, retry_1.fallback)(endpoints);
};
BTCHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchTXs(testnet, options.address, confirmations, options.scriptHash);
    return (0, retry_1.fallback)(endpoints);
};
//# sourceMappingURL=data:application/json;base64,